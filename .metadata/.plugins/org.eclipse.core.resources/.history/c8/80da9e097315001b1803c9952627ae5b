package com.dsi.bibliosys.biblioback.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.verify;

import java.util.stream.Stream;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.reactive.server.WebTestClient;
import org.springframework.test.web.reactive.server.WebTestClient.ResponseSpec;

import com.dsi.bibliosys.biblioback.TestCase;
import com.dsi.bibliosys.biblioback.data.entity.Usager;
import com.dsi.bibliosys.biblioback.service.entity.UsagerService;

@ExtendWith(SpringExtension.class)
@WebFluxTest(UsagerController.class)
@Tag(TestCase.UNIT)
public class UsagerControllerTest {

	@Autowired
	private WebTestClient wtc;

	@MockBean
	private UsagerService usagerService;

	private static Usager usagerGiven;

	@BeforeEach
	public void setUp() {
		usagerGiven = new Usager();
	}

	@AfterEach
	public void unDef() {
		usagerGiven = null;
	}

	// =====================================
	// --- GET
	// =====================================
	@Test
	public void read_returnUsager() {
		given(usagerService.create()).willReturn(usagerGiven);

		ResponseSpec rs = wtc.get().uri("/usager").exchange();

		verify(usagerService).create();
		rs.expectStatus().isOk();
		rs.expectHeader().contentType(MediaType.APPLICATION_JSON);
		rs.expectBody(Usager.class).isEqualTo(usagerGiven);
	}

//	private static Stream<Arguments> readId_usagerGiven_returnHttpStatus() {
//		return Stream.of(Arguments.of(null, HttpStatus.NOT_FOUND), Arguments.of(usagerGiven, HttpStatus.OK));
//	}

	@Test
	public void readId_usagerGivenNull_returnHttpStatus() {
		Integer id = 1;
		given(usagerService.findById(anyInt())).willReturn(null);

		ResponseSpec rs = wtc.get().uri("/usager/" + id).exchange();

		verify(usagerService).findById(id);
		rs.expectStatus().isEqualTo(HttpStatus.NOT_FOUND);
	}
	
	@Test
	public void readId_usagerGiven_returnHttpStatus() {
		Integer id = 1;
		given(usagerService.findById(anyInt())).willReturn(usagerGiven);
		
		ResponseSpec rs = wtc.get().uri("/usager/" + id).exchange();
		
		verify(usagerService).findById(id);
		rs.expectStatus().isEqualTo(HttpStatus.OK);
	}

	// =====================================
	// --- POST
	// =====================================
	private static Stream<Arguments> create_usagerGiven_returnHttpStatus() {
		return Stream.of(Arguments.of(null, HttpStatus.NO_CONTENT), Arguments.of(1, HttpStatus.CREATED));
	}

	@ParameterizedTest
	@MethodSource
	public void create_usagerGiven_returnHttpStatus(Integer id, HttpStatus httpStatus) {
		ReflectionTestUtils.setField(usagerGiven, Usager.ID, id);
		given(usagerService.save(any(Usager.class))).willReturn(usagerGiven);

		ResponseSpec rs = wtc.post().uri("/usager").bodyValue(usagerGiven).exchange();

		verify(usagerService).save(usagerGiven);
		rs.expectStatus().isEqualTo(httpStatus);
	}

}
