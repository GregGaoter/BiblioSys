package com.dsi.bibliosys.biblioback.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.dsi.bibliosys.biblioback.data.entity.Adresse;
import com.dsi.bibliosys.biblioback.data.entity.Identifiant;
import com.dsi.bibliosys.biblioback.data.entity.Lieu;
import com.dsi.bibliosys.biblioback.data.entity.Usager;
import com.dsi.bibliosys.biblioback.data.entity.util.EntityUtil;
import com.dsi.bibliosys.biblioback.service.InscriptionService;
import com.dsi.bibliosys.biblioback.service.entity.AdresseService;
import com.dsi.bibliosys.biblioback.service.entity.IdentifiantService;
import com.dsi.bibliosys.biblioback.service.entity.LieuService;
import com.dsi.bibliosys.biblioback.service.entity.UsagerService;

@RestController
@RequestMapping("/public/inscription")
public class InscriptionController {

	@Autowired
	private UsagerService usagerService;
	@Autowired
	private IdentifiantService identifiantService;
	@Autowired
	private AdresseService adresseService;
	@Autowired
	private LieuService lieuService;
	@Autowired
	private InscriptionService inscriptionService;

	@GetMapping
	public Map<String, Object> getInscriptionEntities() {
		Map<String, Object> inscriptionEntities = new HashMap<>(4);
		inscriptionEntities.put(EntityUtil.getName(Usager.class), usagerService.create());
		inscriptionEntities.put(EntityUtil.getName(Identifiant.class), identifiantService.create());
		inscriptionEntities.put(EntityUtil.getName(Adresse.class), adresseService.create());
		inscriptionEntities.put(EntityUtil.getName(Lieu.class), lieuService.create());
		return inscriptionEntities;
	}

	@PostMapping
	public ResponseEntity<Void> postInscriptionEntities(@RequestBody Map<String, Object> entities) {
		if (entities == null || entities.isEmpty()) {
			return ResponseEntity.noContent().build();
		}
		checkEntities(entities);
		inscriptionService.save(entities);
		return ResponseEntity.created(null).build();
	}

	private void checkEntities(Map<String, Object> entities) {
		if (!entities.containsKey(EntityUtil.getName(Usager.class))) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND,
					"Entity " + EntityUtil.getName(Usager.class) + " not found.");
		}
		if (!entities.containsKey(EntityUtil.getName(Identifiant.class))) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND,
					"Entity " + EntityUtil.getName(Identifiant.class) + " not found.");
		}
		if (!entities.containsKey(EntityUtil.getName(Adresse.class))) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND,
					"Entity " + EntityUtil.getName(Adresse.class) + " not found.");
		}
		if (!entities.containsKey(EntityUtil.getName(Lieu.class))) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND,
					"Entity " + EntityUtil.getName(Lieu.class) + " not found.");
		}
	}

}
