package com.dsi.bibliosys.biblioback.repository.specification;

import org.springframework.data.jpa.domain.Specification;

import com.dsi.bibliosys.biblioback.app.Utils;
import com.dsi.bibliosys.biblioback.data.entity.Lieu;

public class LieuSpecification {

	public static Specification<Lieu> regionContaining(String region) {
		return (root, query, builder) -> {
			return region == null ? null
					: builder.like(builder.function("unaccent", String.class, builder.upper(root.get("region"))),
							"%" + Utils.stringNormalize(region) + "%");
		};
	}

	public static Specification<Lieu> regionEqual(String region) {
		return (root, query, builder) -> {
			return region == null ? null : builder.equal(root.get("region"), region);
		};
	}

	public static Specification<Lieu> departementContaining(String departement) {
		return (root, query, builder) -> {
			return departement == null ? null
					: builder.like(builder.function("unaccent", String.class, builder.upper(root.get("departement"))),
							"%" + Utils.stringNormalize(departement) + "%");
		};
	}

	public static Specification<Lieu> departementEqual(String departement) {
		return (root, query, builder) -> {
			return departement == null ? null : builder.equal(root.get("departement"), departement);
		};
	}

	public static Specification<Lieu> codePostalContaining(String codePostal) {
		return (root, query, builder) -> {
			return codePostal == null ? null
					: builder.like(builder.function("unaccent", String.class, builder.upper(root.get("codePostal"))),
							"%" + Utils.stringNormalize(codePostal) + "%");
		};
	}

	public static Specification<Lieu> codePostalEqual(String codePostal) {
		return (root, query, builder) -> {
			return codePostal == null ? null : builder.equal(root.get("codePostal"), codePostal);
		};
	}

	public static Specification<Lieu> villeContaining(String ville) {
		return (root, query, builder) -> {
			return ville == null ? null
					: builder.like(builder.function("unaccent", String.class, builder.upper(root.get("ville"))),
							"%" + Utils.stringNormalize(ville) + "%");
		};
	}

	public static Specification<Lieu> villeEqual(String ville) {
		return (root, query, builder) -> {
			return ville == null ? null : builder.equal(root.get("ville"), ville);
		};
	}

}
