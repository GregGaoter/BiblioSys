package com.dsi.bibliosys.biblioback.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.verify;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.WebFluxTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.reactive.server.WebTestClient;
import org.springframework.test.web.reactive.server.WebTestClient.ResponseSpec;

import com.dsi.bibliosys.biblioback.TestCase;
import com.dsi.bibliosys.biblioback.data.entity.Usager;
import com.dsi.bibliosys.biblioback.service.entity.UsagerService;

@ExtendWith(SpringExtension.class)
@WebFluxTest(UsagerController.class)
@Tag(TestCase.UNIT)
public class UsagerControllerTest {

	@Autowired
	private WebTestClient wtc;

	@MockBean
	private UsagerService usagerService;

	@Test
	public void getUsager_returnUsager() {
		Usager usagerGiven = new Usager();
		given(usagerService.create()).willReturn(usagerGiven);

		ResponseSpec rs = wtc.get().uri("/usager").exchange();

		verify(usagerService).create();
		rs.expectStatus().isOk();
		rs.expectHeader().contentType(MediaType.APPLICATION_JSON);
		rs.expectBody(Usager.class).isEqualTo(usagerGiven);
	}

	@Test
	public void postUsager_saveUsageridNull_returnNoContent() {
		Usager usagerGiven = new Usager();
		given(usagerService.save(any(Usager.class))).willReturn(usagerGiven);

		ResponseSpec rs = wtc.post().uri("/usager").bodyValue(usagerGiven).exchange();

		verify(usagerService).save(usagerGiven);
		rs.expectStatus().isNoContent();
	}

	@Test
	public void postUsager_saveUsageridNotNull_returnCreatedPlusUri() {
		Usager usagerGiven = new Usager();
		ReflectionTestUtils.setField(usagerGiven, Usager.ID, 1);
		given(usagerService.save(any(Usager.class))).willReturn(usagerGiven);

		ResponseSpec rs = wtc.post().uri("/usager").bodyValue(usagerGiven).exchange();

		verify(usagerService).save(usagerGiven);
		rs.expectStatus().isCreated();
	}

}
