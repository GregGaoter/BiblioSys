package com.dsi.bibliosys.biblioback.mapper;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.verify;

import java.time.LocalDateTime;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.util.ReflectionTestUtils;

import com.dsi.bibliosys.biblioback.TestCase;
import com.dsi.bibliosys.biblioback.data.dto.UsagerDto;
import com.dsi.bibliosys.biblioback.data.entity.Adresse;
import com.dsi.bibliosys.biblioback.data.entity.Identifiant;
import com.dsi.bibliosys.biblioback.data.entity.Usager;
import com.dsi.bibliosys.biblioback.service.AdresseService;
import com.dsi.bibliosys.biblioback.service.IdentifiantService;

@ExtendWith(SpringExtension.class)
@Tag(TestCase.UNIT)
public class UsagerMapperTest {

	private UsagerMapper usagerMapper;

	private static Identifiant identifiant;
	private static Adresse adresse;
	private static Integer identifiantId;
	private static Integer adresseId;
	private static Integer usagerId;
	private static String prenom;
	private static String nom;
	private static LocalDateTime dateNaissance;
	private static String mapToDtoExceptionMessage;
	private static String mapToEntityExceptionMessage;

	@Mock
	private IdentifiantService identifiantService;
	@Mock
	private AdresseService adresseService;

	@BeforeAll
	public static void setUpBeforeAll() {
		identifiantId = 1;
		adresseId = 2;
		usagerId = 3;
		prenom = "Vincent";
		nom = "Senapus";
		dateNaissance = LocalDateTime.of(1979, 6, 5, 23, 37);
		identifiant = new Identifiant();
		ReflectionTestUtils.setField(identifiant, Identifiant.ID, identifiantId);
		adresse = new Adresse();
		ReflectionTestUtils.setField(adresse, Adresse.ID, adresseId);
		mapToDtoExceptionMessage = "source";
		mapToEntityExceptionMessage = "source";
	}

	@AfterAll
	public static void unDefAfterAll() {
		identifiantId = null;
		adresseId = null;
		usagerId = null;
		prenom = null;
		nom = null;
		dateNaissance = null;
		identifiant = null;
		adresse = null;
		mapToDtoExceptionMessage = null;
		mapToEntityExceptionMessage = null;
	}

	@BeforeEach
	public void setUpBeforeEach() {
		usagerMapper = new UsagerMapper(identifiantService, adresseService);
	}

	@AfterEach
	public void unDefAfterEach() {
		usagerMapper = null;
	}

	@Test
	public void mapToDto_usager() {
		Usager usager = new Usager();
		ReflectionTestUtils.setField(usager, Usager.ID, usagerId);
		usager.setPrenom(prenom);
		usager.setNom(nom);
		usager.setDateNaissance(dateNaissance);
		usager.setIdentifiant(identifiant);
		usager.setAdresse(adresse);

		UsagerDto usagerDto = usagerMapper.mapToDto(usager);

		assertThat(usagerDto.getId()).isEqualTo(usagerId);
		assertThat(usagerDto.getPrenom()).isEqualTo(prenom);
		assertThat(usagerDto.getNom()).isEqualTo(nom);
		assertThat(usagerDto.getDateNaissance()).isEqualTo(dateNaissance);
		assertThat(usagerDto.getIdentifiantId()).isEqualTo(identifiantId);
		assertThat(usagerDto.getAdresseId()).isEqualTo(adresseId);
	}

	@Test
	public void mapToDto_null() {
		Exception exception = assertThrows(NullPointerException.class, () -> usagerMapper.mapToDto(null));

		String expectedMessage = "";
	}

	@Test
	public void mapToEntity() {
		UsagerDto usagerDto = new UsagerDto();
		usagerDto.setPrenom(prenom);
		usagerDto.setNom(nom);
		usagerDto.setDateNaissance(dateNaissance);
		usagerDto.setIdentifiantId(identifiantId);
		usagerDto.setAdresseId(adresseId);

		given(identifiantService.findById(anyInt())).willReturn(identifiant);
		given(adresseService.findById(anyInt())).willReturn(adresse);

		Usager usager = usagerMapper.mapToEntity(usagerDto);

		verify(identifiantService).findById(identifiantId);
		verify(adresseService).findById(adresseId);
		assertThat(usager.getId()).isNull();
		assertThat(usager.getPrenom()).isEqualTo(prenom);
		assertThat(usager.getNom()).isEqualTo(nom);
		assertThat(usager.getDateNaissance()).isEqualTo(dateNaissance);
		assertThat(usager.getIdentifiant()).isEqualToComparingOnlyGivenFields(identifiant, Identifiant.ID);
		assertThat(usager.getAdresse()).isEqualToComparingOnlyGivenFields(adresse, Adresse.ID);
	}

}
