package com.dsi.bibliosys.biblioback.service;

import static com.dsi.bibliosys.biblioback.repository.specification.GenreSpecification.rayonIdEqual;
import static com.dsi.bibliosys.biblioback.repository.specification.LivreSpecification.genreIdEqual;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Service;

import com.dsi.bibliosys.biblioback.data.entity.EcritureLivre;
import com.dsi.bibliosys.biblioback.data.entity.Genre;
import com.dsi.bibliosys.biblioback.data.entity.Livre;
import com.dsi.bibliosys.biblioback.repository.EcritureLivreRepository;

/**
 * Classe fournissant les services de l'entit√© business EcritureLivre.
 */
@Service
public class EcritureLivreService implements CrudService<EcritureLivre, Integer> {

	private final EcritureLivreRepository ecritureLivreRepository;

	@Autowired
	public EcritureLivreService(EcritureLivreRepository ecritureLivreRepository) {
		this.ecritureLivreRepository = ecritureLivreRepository;
	}

	@Override
	public JpaRepository<EcritureLivre, Integer> getRepository() {
		return ecritureLivreRepository;
	}

	@Override
	public EcritureLivre create() {
		return new EcritureLivre();
	}
	
	public EcritureLivreService findByLivreId(Integer id) {
		List<Genre> genres = genreRepository.findAll(rayonIdEqual(id));
		return genres.stream().flatMap(genre -> findAll(genreIdEqual(genre.getId())).stream())
				.collect(Collectors.toList());
	}

}
