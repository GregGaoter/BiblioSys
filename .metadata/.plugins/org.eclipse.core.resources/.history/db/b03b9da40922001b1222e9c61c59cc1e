package com.dsi.bibliosys.biblioback.mapper;

import java.time.LocalDateTime;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.util.ReflectionTestUtils;

import com.dsi.bibliosys.biblioback.TestCase;
import com.dsi.bibliosys.biblioback.data.entity.Adresse;
import com.dsi.bibliosys.biblioback.data.entity.Bibliotheque;
import com.dsi.bibliosys.biblioback.data.entity.Collection;
import com.dsi.bibliosys.biblioback.data.entity.Identifiant;
import com.dsi.bibliosys.biblioback.service.AdresseService;
import com.dsi.bibliosys.biblioback.service.BibliothequeService;
import com.dsi.bibliosys.biblioback.service.IdentifiantService;

@ExtendWith(SpringExtension.class)
@Tag(TestCase.UNIT)
public class PersonnelMapperTest {

	private PersonnelMapper personnelMapper;

	private static Integer id;
	private static String prenom;
	private static String nom;
	private static LocalDateTime dateNaissance;
	private static Identifiant identifiant;
	private static Integer identifiantId;
	private static Adresse adresse;
	private static Integer adresseId;
	private static Bibliotheque bibliotheque;
	private static Integer bibliothequeId;
	private static String mapToDtoExceptionMessage;
	private static String mapToEntityExceptionMessage;

	@Mock
	private IdentifiantService identifiantService;
	@Mock
	private AdresseService adresseService;
	@Mock
	private BibliothequeService bibliothequeService;

	@BeforeAll
	public static void setUpBeforeAll() {
		id = 1;
		prenom = "Eugenia";
		nom = "Lizotte";
		dateNaissance = LocalDateTime.of(1935, 1, 2, 10, 30);
		identifiant = new Identifiant();
		identifiantId = 2;
		ReflectionTestUtils.setField(identifiant, Identifiant.ID, identifiantId);
		adresse = new Adresse();
		adresseId = 3;
		ReflectionTestUtils.setField(adresse, Adresse.ID, adresseId);
		bibliotheque = new Bibliotheque();
		bibliothequeId = 4;
		ReflectionTestUtils.setField(bibliotheque, Bibliotheque.ID, bibliothequeId);
		mapToDtoExceptionMessage = "source";
		mapToEntityExceptionMessage = "source";
	}

	@AfterAll
	public static void unDefAfterAll() {
		id = null;
		prenom = null;
		nom = null;
		dateNaissance = null;
		identifiant = null;
		identifiantId = null;
		adresse = null;
		adresseId = null;
		bibliotheque = null;
		bibliothequeId = null;
		mapToDtoExceptionMessage = null;
		mapToEntityExceptionMessage = null;
	}

	@BeforeEach
	public void setUpBeforeEach() {
		personnelMapper = new PersonnelMapper(identifiantService, adresseService, bibliothequeService);
	}

	@AfterEach
	public void unDefAfterEach() {
		personnelMapper = null;
	}

}
